<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.joblessfriend.jobfinder.recruitment.dao.RecruitmentDao">

    <select id="jobGroupList" resultType="com.joblessfriend.jobfinder.recruitment.domain.JobGroupVo">
        SELECT
            JOB_GROUP_ID AS jobGroupId,
            JOB_GROUP_NAME AS jobGroupName
        FROM JOB_GROUP
    </select>


    <select id="jobList" parameterType="int" resultType="com.joblessfriend.jobfinder.recruitment.domain.JobGroupVo">
        SELECT
            JOB_NAME AS jobName,
            JOB_ID AS jobId
        FROM JOB
        WHERE JOB_GROUP_ID = #{jobGroupId}
    </select>

<!--    채용공고리스트 , 기업join, 직군 , 직무만 join상태 채용공고 main페이지전용 -->
    <select id="RecruitmentList" resultType="com.joblessfriend.jobfinder.recruitment.domain.RecruitmentVo">-->
    SELECT
        jp.job_post_id AS jobPostId,
        c.company_id AS companyId,
        c.company_name AS companyName,
        jp.title AS title,
        jp.career_type AS careerType,
        jp.education AS education,
        jg.job_group_name AS jobGroupName,
        j.job_name AS jobName,
        jp.end_date AS endDate,
        jp.job_img AS jobImg
    FROM JOB_POST jp
             JOIN COMPANY c ON jp.company_id = c.company_id
             JOIN JOB_GROUP jg ON jp.job_group_id = jg.job_group_id
             JOIN JOB j ON jp.job_id = j.job_id
    ORDER BY jp.end_date ASC

    </select>
<!-- 스킬리스트  -->
    <select id="getRecruitmentId" parameterType="int" resultType="com.joblessfriend.jobfinder.recruitment.domain.RecruitmentVo">
        SELECT
            jp.job_post_id AS jobPostId,
            jp.title, jp.content,
            jp.career_type AS careerType,
            jp.education,
            jp.start_date AS startDate,
            jp.end_date AS endDate,
            jg.job_group_name AS jobGroupName,
            jp.company_id AS companyId,
            jp.job_id AS jobId,
            jp.salary AS salary,
            jp.work_hours AS workHours
        FROM JOB_POST jp
                 JOIN JOB_GROUP jg ON jp.job_group_id = jg.job_group_id
        WHERE jp.job_post_id = #{jobPostId}
    </select>
<!--    복지리스트-->
    <select id="selectWelfareByJobPostId" parameterType="int" resultType="com.joblessfriend.jobfinder.recruitment.domain.WelfareVo">
        SELECT
            JOB_WELFARE_ID AS jobWelfareId ,
            JOB_POST_ID AS jobPostId,
            BENEFIT_TEXT AS benefitText
        FROM
            JOB_POST_WELFARE
        WHERE
            JOB_POST_ID = #{jobPostId}
    </select>


    <delete id="jobPostFileDelete" parameterType="list">
    
	    DELETE FROM JOB_POST_FILE
	    WHERE JOB_POST_ID IN
	    <foreach item="id" collection="list" open="(" separator="," close=")">
    	    #{id}
    	</foreach>
    </delete>
    
    <delete id="jobPostTagDelete" parameterType="list">
	    DELETE FROM JOB_POST_TAG
	    WHERE JOB_POST IN
	    <foreach item="id" collection="list" open="(" separator="," close=")">
     	   #{id}
    	</foreach>
    </delete>
    
    <delete id="jobPostDelete" parameterType="list">
	    DELETE FROM JOB_POST
	    WHERE JOB_POST_ID IN
	    <foreach item="id" collection="list" open="(" separator="," close=")">
	        #{id}
	    </foreach>    
	</delete>
<!--채용공고 인서트 -->
    <insert id="insertRecruitment" parameterType="com.joblessfriend.jobfinder.recruitment.domain.RecruitmentVo">
        <selectKey keyProperty="jobPostId"
                   resultType="java.lang.Integer"
                   order="BEFORE">
            SELECT JOB_POST_ID_SEQ.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO JOB_POST (
        JOB_POST_ID,
        COMPANY_ID,
        TITLE,
        CONTENT,
        SALARY,
        WORK_HOURS,
        JOB_ID,
        JOB_GROUP_ID,
        VIEWS,
        JOB_IMG,
        CAREER_TYPE,
        EDUCATION,
        START_DATE,
        END_DATE,
        IS_CONTINUOUS,
        MAX_APPLICANTS,
        CURRENT_APPLICANTS
        ) VALUES (
        #{jobPostId},
        #{companyId},
        #{title},
        #{content},
        #{salary},
        #{workHours},
        #{jobId},
        #{jobGroupId},
        0,
        NULL,
        #{careerType},
        #{education},
        #{startDate},
        #{endDate},
        0,
        0,
        0
        )

    </insert>


    <!-- 2. 연관 스킬 등록 (job_post_tag 인서트) -->
    <insert id="insertJobPostTag" parameterType="map">
        INSERT ALL
        <foreach collection="tagIdList" item="tagId">
            INTO JOB_POST_TAG (JOB_POST, TAG_ID)
            VALUES (#{jobPostId}, #{tagId})
        </foreach>
        SELECT * FROM dual
    </insert>

<!--복리후생 -->
    <insert id="insertJobPostWelfare" parameterType="java.util.List">
        INSERT ALL
        <foreach collection="list" item="welfare">
            INTO JOB_POST_WELFARE (
            JOB_WELFARE_ID, JOB_POST_ID, BENEFIT_TEXT
            ) VALUES (
            SEQ_JOB_WELFARE_ID.NEXTVAL,
            #{welfare.jobPostId},
            #{welfare.benefitText}
            )
        </foreach>
        SELECT * FROM DUAL
    </insert>










    <!--    관리자용 -->
    <select id="adminRecruitmentList" resultType="com.joblessfriend.jobfinder.recruitment.domain.RecruitmentVo">-->
    SELECT
        jp.job_post_id AS jobPostId,
        c.company_id AS companyId,
        c.company_name AS companyName,
        jp.title AS title,
        jp.career_type AS careerType,
        jp.education AS education,
        jg.job_group_name AS jobGroupName,
        j.job_name AS jobName,
        jp.start_date AS startDate,
        jp.end_date AS endDate,
        jp.MAX_APPLICANTS AS maxApplicants,
        jp.IS_CONTINUOUS as isContinuous
    FROM JOB_POST jp
             JOIN COMPANY c ON jp.company_id = c.company_id
             JOIN JOB_GROUP jg ON jp.job_group_id = jg.job_group_id
             JOIN JOB j ON jp.job_id = j.job_id
    ORDER BY jp.job_post_id DESC

    </select>
    
    
    <select id="companyRecruitmentList" resultType="com.joblessfriend.jobfinder.recruitment.domain.CompanyRecruitmentVo">
		SELECT
		    jp.job_post_id AS jobPostId,
		    c.company_id AS companyId,
		    c.company_name AS companyName,
		    jp.title AS title,
		    jp.career_type AS careerType,
		    jp.education AS education,
		    jg.job_group_name AS jobGroupName,
		    j.job_name AS jobName,
		    jp.start_date AS startDate,
		    jp.end_date AS endDate,
		    jp.modified_date AS modifiedDate,
		    jp.max_applicants AS maxApplicants,
		    jp.is_continuous AS isContinuous,
		    NVL(rm.resume_count, 0) AS applicantCount
		FROM job_post jp
		JOIN company c ON jp.company_id = c.company_id
		JOIN job_group jg ON jp.job_group_id = jg.job_group_id
		JOIN job j ON jp.job_id = j.job_id
		LEFT JOIN (
		    SELECT job_post_id, COUNT(*) AS resume_count
		    FROM resume_manage
		    GROUP BY job_post_id
		) rm ON jp.job_post_id = rm.job_post_id
		WHERE c.company_id = #{companyId}
		ORDER BY jp.job_post_id DESC

    </select>
<!--    필터 카운팅 -->
    <select id="countFilteredPosts"
            parameterType="com.joblessfriend.jobfinder.recruitment.domain.FilterRequestVo"
            resultType="int">

        SELECT COUNT(DISTINCT jp_inner.job_post_id)
        FROM job_post jp_inner
        <if test="skillTags != null and skillTags.size() > 0">
            JOIN job_post_tag jpt ON jpt.job_post = jp_inner.job_post_id
        </if>
        WHERE 1 = 1
        <if test="jobIds != null and jobIds.size() > 0">
            AND jp_inner.job_id IN
            <foreach collection="jobIds" item="jobId" open="(" separator="," close=")">
                #{jobId}
            </foreach>
        </if>
        <if test="careers != null and careers.size() > 0">
            AND jp_inner.career_type IN
            <foreach collection="careers" item="career" open="(" separator="," close=")">
                #{career}
            </foreach>
        </if>
        <if test="educations != null and educations.size() > 0">
            AND jp_inner.education IN
            <foreach collection="educations" item="edu" open="(" separator="," close=")">
                #{edu}
            </foreach>
        </if>
        <if test="skillTags != null and skillTags.size() > 0">
            AND jpt.tag_id IN
            <foreach collection="skillTags" item="tagId" open="(" separator="," close=")">
                #{tagId}
            </foreach>
        </if>
    </select>


    <select id="getFilteredRecruitmentList"
            parameterType="com.joblessfriend.jobfinder.recruitment.domain.FilterRequestVo"
            resultType="com.joblessfriend.jobfinder.recruitment.domain.RecruitmentVo">

        SELECT
        jp.job_post_id AS jobPostId,
        c.company_id AS companyId,
        c.company_name AS companyName,
        jp.title AS title,
        jp.career_type AS careerType,
        jp.education AS education,
        jg.job_group_name AS jobGroupName,
        j.job_name AS jobName,
        jp.end_date AS endDate
        FROM job_post jp
        JOIN company c ON jp.company_id = c.company_id
        JOIN job j ON jp.job_id = j.job_id
        JOIN job_group jg ON j.job_group_id = jg.job_group_id
        WHERE jp.job_post_id IN (
        SELECT DISTINCT jp_inner.job_post_id
        FROM job_post jp_inner
        <if test="skillTags != null and skillTags.size() > 0">
            JOIN job_post_tag jpt ON jpt.job_post = jp_inner.job_post_id
        </if>
        WHERE 1 = 1
        <if test="jobIds != null and jobIds.size() > 0">
            AND jp_inner.job_id IN
            <foreach collection="jobIds" item="jobId" open="(" separator="," close=")">
                #{jobId}
            </foreach>
        </if>
        <if test="careers != null and careers.size() > 0">
            AND jp_inner.career_type IN
            <foreach collection="careers" item="career" open="(" separator="," close=")">
                #{career}
            </foreach>
        </if>
        <if test="educations != null and educations.size() > 0">
            AND jp_inner.education IN
            <foreach collection="educations" item="edu" open="(" separator="," close=")">
                #{edu}
            </foreach>
        </if>
        <if test="skillTags != null and skillTags.size() > 0">
            AND jpt.tag_id IN
            <foreach collection="skillTags" item="tagId" open="(" separator="," close=")">
                #{tagId}
            </foreach>
        </if>
        )
    </select>


    <update id="jobPostStop" parameterType="list">
	    UPDATE JOB_POST
	    SET IS_CONTINUOUS = 1
	    WHERE JOB_POST_ID IN
	    <foreach item="id" collection="list" open="(" separator="," close=")">
	        #{id}
	    </foreach>    
	</update>



</mapper>
