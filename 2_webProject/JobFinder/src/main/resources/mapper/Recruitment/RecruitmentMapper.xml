<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.joblessfriend.jobfinder.recruitment.dao.RecruitmentDao">

    <select id="jobGroupList" resultType="com.joblessfriend.jobfinder.recruitment.domain.JobGroupVo">
        SELECT
            JOB_GROUP_ID AS jobGroupId,
            JOB_GROUP_NAME AS jobGroupName
        FROM JOB_GROUP
    </select>


    <select id="jobList" parameterType="int" resultType="com.joblessfriend.jobfinder.recruitment.domain.JobGroupVo">
        SELECT
            JOB_NAME AS jobName,
            JOB_ID AS jobId
        FROM JOB
        WHERE JOB_GROUP_ID = #{jobGroupId}
    </select>


    <select id="getRecruitmentTotalCount" resultType="int" parameterType="com.joblessfriend.jobfinder.util.SearchVo">
        SELECT COUNT(*)
        FROM job_post jp
                 JOIN company c ON jp.company_id = c.company_id
                 JOIN job_group jg ON jp.job_group_id = jg.job_group_id
                 JOIN job j ON jp.job_id = j.job_id
    </select>
<!--    채용공고리스트 , 기업join, 직군 , 직무만 join상태 채용공고 main페이지전용 -->
    <select id="RecruitmentList" resultType="com.joblessfriend.jobfinder.recruitment.domain.RecruitmentVo"
            parameterType="com.joblessfriend.jobfinder.util.SearchVo">

        SELECT *
        FROM (
                 SELECT inner_query.*, ROWNUM AS rnum
                 FROM (
                          SELECT
                              jp.job_post_id AS jobPostId,
                              c.company_id AS companyId,
                              c.company_name AS companyName,
                              jp.title AS title,
                              jp.career_type AS careerType,
                              jp.education AS education,
                              jg.job_group_name AS jobGroupName,
                              j.job_name AS jobName,
                              jp.end_date AS endDate,
                              jp.job_img AS jobImg,
                              JP.IS_CONTINUOUS AS isContinuous
                          FROM job_post jp
                                   JOIN company c ON jp.company_id = c.company_id
                                   JOIN job_group jg ON jp.job_group_id = jg.job_group_id
                                   JOIN job j ON jp.job_id = j.job_id
                          ORDER BY jp.end_date ASC
                      ) inner_query
                 WHERE ROWNUM &lt;= #{endRow}
             )
        WHERE rnum &gt;= #{startRow}
    </select>
    
	<!--     메인 용 : 공고 등록순(최신순) -->
    <select id="RecruitmentListLatest" resultType="com.joblessfriend.jobfinder.recruitment.domain.RecruitmentVo"
            parameterType="com.joblessfriend.jobfinder.util.SearchVo">

        SELECT *
        FROM (
                 SELECT inner_query.*, ROWNUM AS rnum
                 FROM (
                          SELECT
                              jp.job_post_id AS jobPostId,
                              c.company_id AS companyId,
                              c.company_name AS companyName,
                              jp.title AS title,
                              jp.career_type AS careerType,
                              jp.education AS education,
                              jg.job_group_name AS jobGroupName,
                              j.job_name AS jobName,
                              jp.end_date AS endDate,
                              jp.job_img AS jobImg
                          FROM job_post jp
                                   JOIN company c ON jp.company_id = c.company_id
                                   JOIN job_group jg ON jp.job_group_id = jg.job_group_id
                                   JOIN job j ON jp.job_id = j.job_id
                          ORDER BY jp.job_post_id DESC
                      ) inner_query
                 WHERE ROWNUM &lt;= #{endRow}
             )
        WHERE rnum &gt;= #{startRow}
    </select>
    
	<!--     메인 용 : 조회수 많은 순 -->
    <select id="RecruitmentListViews" resultType="com.joblessfriend.jobfinder.recruitment.domain.RecruitmentVo"
            parameterType="com.joblessfriend.jobfinder.util.SearchVo">

        SELECT *
        FROM (
                 SELECT inner_query.*, ROWNUM AS rnum
                 FROM (
                          SELECT
                              jp.job_post_id AS jobPostId,
                              c.company_id AS companyId,
                              c.company_name AS companyName,
                              jp.title AS title,
                              jp.career_type AS careerType,
                              jp.education AS education,
                              jg.job_group_name AS jobGroupName,
                              j.job_name AS jobName,
                              jp.end_date AS endDate,
                              jp.job_img AS jobImg,
                              jp.views as views
                          FROM job_post jp
                                   JOIN company c ON jp.company_id = c.company_id
                                   JOIN job_group jg ON jp.job_group_id = jg.job_group_id
                                   JOIN job j ON jp.job_id = j.job_id
                          ORDER BY jp.views DESC
                      ) inner_query
                 WHERE ROWNUM &lt;= #{endRow}
             )
        WHERE rnum &gt;= #{startRow}
    </select>
    
    

    <!-- 스킬리스트  -->
    <select id="getRecruitmentId" parameterType="int" resultType="com.joblessfriend.jobfinder.recruitment.domain.RecruitmentVo">
        SELECT
            jp.job_post_id AS jobPostId,
            jp.title,
            jp.content,
            jp.career_type AS careerType,
            jp.education,
            jp.start_date AS startDate,
            jp.end_date AS endDate,
            jg.job_group_name AS jobGroupName,
            jp.company_id AS companyId,
            jp.job_id AS jobId,
            j.job_name AS jobName,
            jp.salary AS salary,
            jp.work_hours AS workHours,
            jp.template_type AS templateType,
            jp.job_img as jobImg
        FROM JOB_POST jp
                 JOIN JOB_GROUP jg ON jp.job_group_id = jg.job_group_id
                 JOIN JOB j ON jp.job_id = j.job_id
        WHERE jp.job_post_id = #{jobPostId}

    </select>
<!--    복지리스트-->
    <select id="selectWelfareByJobPostId" parameterType="int" resultType="com.joblessfriend.jobfinder.recruitment.domain.WelfareVo">
        SELECT
            JOB_WELFARE_ID AS jobWelfareId ,
            JOB_POST_ID AS jobPostId,
            BENEFIT_TEXT AS benefitText
        FROM
            JOB_POST_WELFARE
        WHERE
            JOB_POST_ID = #{jobPostId}
    </select>

    <update id="increaseViews" parameterType="int">
        UPDATE JOB_POST
        SET VIEWS = VIEWS + 1
        WHERE JOB_POST_ID = #{jobPostId}
    </update>
<!--채용공고 인서트 -->
    <insert id="insertRecruitment" parameterType="com.joblessfriend.jobfinder.recruitment.domain.RecruitmentVo">
        <selectKey keyProperty="jobPostId"
                   resultType="java.lang.Integer"
                   order="BEFORE">
            SELECT JOB_POST_ID_SEQ.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO JOB_POST (
        JOB_POST_ID,
        COMPANY_ID,
        TITLE,
        CONTENT,
        SALARY,
        WORK_HOURS,
        JOB_ID,
        JOB_GROUP_ID,
        VIEWS,
        JOB_IMG,
        CAREER_TYPE,
        EDUCATION,
        TEMPLATE_TYPE,
        START_DATE,
        END_DATE,
        IS_CONTINUOUS,
        MAX_APPLICANTS,
        CURRENT_APPLICANTS
        ) VALUES (
        #{jobPostId},
        #{companyId},
        #{title},
        #{content},
        #{salary},
        #{workHours},
        #{jobId},
        #{jobGroupId},
        0,
        #{jobImg},
        #{careerType},
        #{education},
        #{templateType},
        #{startDate},
        #{endDate},
        0,
        0,
        0
        )

    </insert>


    <!-- 2. 연관 스킬 등록 (job_post_tag 인서트) -->
    <insert id="insertJobPostTag" parameterType="map">
        INSERT ALL
        <foreach collection="tagIdList" item="tagId">
            INTO JOB_POST_TAG (JOB_POST, TAG_ID)
            VALUES (#{jobPostId}, #{tagId})
        </foreach>
        SELECT * FROM dual
    </insert>

<!--복리후생 -->


    <insert id="insertJobPostFile" parameterType="com.joblessfriend.jobfinder.recruitment.domain.JobPostFileVo">
        INSERT INTO JOB_POST_FILE (
        JOB_POST_FILE_ID,
        JOB_POST_ID,
        FILE_NAME,
        STORED_FILE_NAME,
        FILE_EXTENSION,
        FILE_SIZE,
        TEMP_KEY,
        CREATE_AT,
        MODIFIED_AT
        ) VALUES (
        SEQ_JOB_POST_FILE_ID.NEXTVAL,
        NULL,  <!-- 추후 등록 시 갱신 -->
        #{fileName},
        #{storedFileName},
        #{fileExtension},
        #{fileSize},
        #{tempKey},
        SYSDATE,
        SYSDATE
        )
    </insert>
    <update id="updateJobPostIdByTempKey">
        UPDATE JOB_POST_FILE
        SET JOB_POST_ID = #{jobPostId}
        WHERE TEMP_KEY = #{tempKey}
    </update>

<!--채용공고 업데이트 라인 -->

    <update id="updateRecruitment" parameterType="com.joblessfriend.jobfinder.recruitment.domain.RecruitmentVo">
        UPDATE JOB_POST
        SET
            TITLE = #{title},
            CONTENT = #{content},
            SALARY = #{salary},
            WORK_HOURS = #{workHours},
            JOB_ID = #{jobId},
            JOB_GROUP_ID = #{jobGroupId},
            JOB_IMG = #{jobImg,jdbcType=VARCHAR},
            CAREER_TYPE = #{careerType},
            EDUCATION = #{education},
            TEMPLATE_TYPE = #{templateType},
            START_DATE = #{startDate, jdbcType=DATE},
            END_DATE = #{endDate, jdbcType=DATE}
        WHERE JOB_POST_ID = #{jobPostId}
    </update>
<!--    삭제후 재등록 -->
    <delete id="deleteTagsByJobPostId" parameterType="int">
        DELETE FROM JOB_POST_TAG WHERE JOB_POST = #{jobPostId}
    </delete>



    <delete id="deleteWelfareByJobPostId" parameterType="int">
        DELETE FROM JOB_POST_WELFARE WHERE JOB_POST_ID = #{jobPostId}
    </delete>


    <insert id="insertJobPostWelfare" parameterType="com.joblessfriend.jobfinder.recruitment.domain.WelfareVo">
        INSERT INTO JOB_POST_WELFARE (
            JOB_WELFARE_ID,
            JOB_POST_ID,
            BENEFIT_TEXT
        ) VALUES (
                     SEQ_JOB_WELFARE_ID.NEXTVAL,
                     #{jobPostId},
                     #{benefitText}
                 )
    </insert>


<!--    필터 카운팅 -->
    <select id="countFilteredPosts"
            parameterType="com.joblessfriend.jobfinder.recruitment.domain.FilterRequestVo"
            resultType="int">

        SELECT COUNT(DISTINCT jp_inner.job_post_id)
        FROM job_post jp_inner
        <if test="skillTags != null and skillTags.size() > 0">
            JOIN job_post_tag jpt ON jpt.job_post = jp_inner.job_post_id
        </if>
        WHERE 1 = 1
        <if test="jobIds != null and jobIds.size() > 0">
            AND jp_inner.job_id IN
            <foreach collection="jobIds" item="jobId" open="(" separator="," close=")">
                #{jobId}
            </foreach>
        </if>
        <if test="careers != null and careers.size() > 0">
            AND jp_inner.career_type IN
            <foreach collection="careers" item="career" open="(" separator="," close=")">
                #{career}
            </foreach>
        </if>
        <if test="educations != null and educations.size() > 0">
            AND jp_inner.education IN
            <foreach collection="educations" item="edu" open="(" separator="," close=")">
                #{edu}
            </foreach>
        </if>
        <if test="skillTags != null and skillTags.size() > 0">
            AND jpt.tag_id IN
            <foreach collection="skillTags" item="tagId" open="(" separator="," close=")">
                #{tagId}
            </foreach>
        </if>
    </select>


    <select id="getFilteredRecruitmentList"
            parameterType="com.joblessfriend.jobfinder.recruitment.domain.FilterRequestVo"
            resultType="com.joblessfriend.jobfinder.recruitment.domain.RecruitmentVo">

        SELECT * FROM (
        SELECT inner_query.*, ROWNUM AS rnum FROM (
        SELECT
        jp.job_post_id AS jobPostId,
        c.company_id AS companyId,
        c.company_name AS companyName,
        jp.title AS title,
        jp.career_type AS careerType,
        jp.education AS education,
        jg.job_group_name AS jobGroupName,
        j.job_name AS jobName,
        jp.end_date AS endDate
        FROM job_post jp
        JOIN company c ON jp.company_id = c.company_id
        JOIN job j ON jp.job_id = j.job_id
        JOIN job_group jg ON j.job_group_id = jg.job_group_id
        WHERE jp.job_post_id IN (
        SELECT DISTINCT jp_inner.job_post_id
        FROM job_post jp_inner
        <if test="skillTags != null and skillTags.size() > 0">
            JOIN job_post_tag jpt ON jpt.job_post = jp_inner.job_post_id
        </if>
        WHERE 1 = 1
        <if test="jobIds != null and jobIds.size() > 0">
            AND jp_inner.job_id IN
            <foreach collection="jobIds" item="jobId" open="(" separator="," close=")">
                #{jobId}
            </foreach>
        </if>
        <if test="careers != null and careers.size() > 0">
            AND jp_inner.career_type IN
            <foreach collection="careers" item="career" open="(" separator="," close=")">
                #{career}
            </foreach>
        </if>
        <if test="educations != null and educations.size() > 0">
            AND jp_inner.education IN
            <foreach collection="educations" item="edu" open="(" separator="," close=")">
                #{edu}
            </foreach>
        </if>
        <if test="skillTags != null and skillTags.size() > 0">
            AND jpt.tag_id IN
            <foreach collection="skillTags" item="tagId" open="(" separator="," close=")">
                #{tagId}
            </foreach>
        </if>
        )
        ORDER BY jp.end_date ASC
        ) inner_query
        WHERE ROWNUM &lt;= #{endRow}
        )
        WHERE rnum &gt;= #{startRow}
    </select>
<!--    갯수 조회용쿼리 -->
    <select id="getFilteredRecruitmentTotalCount"
            parameterType="com.joblessfriend.jobfinder.recruitment.domain.FilterRequestVo"
            resultType="int">
        SELECT COUNT(DISTINCT jp_inner.job_post_id)
        FROM job_post jp_inner
        <if test="skillTags != null and skillTags.size() > 0">
            JOIN job_post_tag jpt ON jpt.job_post = jp_inner.job_post_id
        </if>
        WHERE 1 = 1
        <if test="jobIds != null and jobIds.size() > 0">
            AND jp_inner.job_id IN
            <foreach collection="jobIds" item="jobId" open="(" separator="," close=")">
                #{jobId}
            </foreach>
        </if>
        <if test="careers != null and careers.size() > 0">
            AND jp_inner.career_type IN
            <foreach collection="careers" item="career" open="(" separator="," close=")">
                #{career}
            </foreach>
        </if>
        <if test="educations != null and educations.size() > 0">
            AND jp_inner.education IN
            <foreach collection="educations" item="edu" open="(" separator="," close=")">
                #{edu}
            </foreach>
        </if>
        <if test="skillTags != null and skillTags.size() > 0">
            AND jpt.tag_id IN
            <foreach collection="skillTags" item="tagId" open="(" separator="," close=")">
                #{tagId}
            </foreach>
        </if>
    </select>




 

</mapper>
