<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.joblessfriend.jobfinder.resume.dao.ResumeApplyDao">

	<resultMap type="com.joblessfriend.jobfinder.resume.domain.ResumeVo" id="ResumeResultMap">
		<id column="RESUME_ID" property="resumeId" />
		<result column="NAME" property="memberName" />
		<result column="BIRTHDATE" property="birthDate" />
		<result column="PHONENUMBER" property="phoneNumber" />
        <result column="RESUME_TITLE" property="title" />
		<result column="EMAIL" property="email" />
		<result column="POSTAL_CODE_ID" property="postalCodeId" />
		<result column="ADDRESS" property="address" />
		<result column="SELF_INTRODUCTION" property="selfIntroduction" />
		<result column="MEMBER_ID" property="memberId" />
		<result column="PROFILE" property="profile" />
		<result column="CREATE_AT" property="createDate" javaType="java.util.Date" />
		<result column="MODIFIED_AT" property="modifyDate" javaType="java.util.Date" />
		<result column="JOB_GROUP_ID" property="jobGroupId" />
		<result column="JOB_ID" property="jobId" />
	</resultMap>
	
	<!-- 조회 -->
	<select id="findResumesByMemberId" resultMap="ResumeResultMap">
        SELECT RESUME_ID, NAME, BIRTHDATE, PHONENUMBER, EMAIL, POSTAL_CODE_ID, ADDRESS, RESUME_TITLE,
               SELF_INTRODUCTION, MEMBER_ID, PROFILE, CREATE_AT, MODIFIED_AT, JOB_GROUP_ID, JOB_ID    
        FROM RESUME
        WHERE MEMBER_ID = #{memberId}
        ORDER BY RESUME_ID DESC
	</select>

	<select id="getResumeByResumeId" resultMap="ResumeResultMap">
        SELECT RESUME_ID, NAME, BIRTHDATE, PHONENUMBER, EMAIL, POSTAL_CODE_ID, ADDRESS, 
               SELF_INTRODUCTION, MEMBER_ID, PROFILE, CREATE_AT, MODIFIED_AT, JOB_GROUP_ID, JOB_ID    
        FROM RESUME
        WHERE RESUME_ID = #{resumeId}
    </select>

	<!-- 삭제 -->
    <delete id="deleteResumeById">
        DELETE FROM RESUME 
        WHERE RESUME_ID = #{resumeId}
        AND MEMBER_ID = #{memberId}
    </delete>
    
    <!-- 이력서 사진 업데이트 -->
    <update id="updateProfileImage">
        UPDATE RESUME
        SET PROFILE = #{imageUrl}, MODIFIED_AT = SYSDATE
        WHERE RESUME_ID = #{resumeId}
          AND MEMBER_ID = #{memberId}
    </update>
    
    <!-- 이력서 저장 -->
    <insert id="insertResumeCopy" parameterType="com.joblessfriend.jobfinder.resume.domain.ResumeVo">
        <selectKey keyProperty="resumeId" resultType="int" order="BEFORE">
            SELECT SEQ_RESUME_COPY_ID.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO RESUME_COPY (
        RESUME_ID, MEMBER_ID, NAME, BIRTHDATE, PHONENUMBER, EMAIL,
        POSTAL_CODE_ID, ADDRESS, SELF_INTRODUCTION, PROFILE,
         CREATE_AT, MODIFIED_AT
        )
        VALUES (
        #{resumeId},
        #{memberId, jdbcType=INTEGER},
        #{memberName, jdbcType=VARCHAR},
        #{birthDate, jdbcType=DATE},
        #{phoneNumber, jdbcType=VARCHAR},
        #{email, jdbcType=VARCHAR},
        #{postalCodeId, jdbcType=INTEGER},
        #{address, jdbcType=VARCHAR},
        #{selfIntroduction, jdbcType=VARCHAR},
        #{profile, jdbcType=VARCHAR},
        SYSDATE, SYSDATE
        )
    </insert>

    
    <!-- 학력정보 저장 -->
    <insert id="insertSchool" parameterType="com.joblessfriend.jobfinder.resume.domain.SchoolVo">
    INSERT INTO SCHOOL_COPY (
        SCHOOL_ID, RESUME_ID, SORTATION, SCHOOL_NAME, 
        YEAR_OF_GRADUATION, STATUS, MAJOR_NAME, START_DATE, END_DATE
    )
    VALUES (
        SEQ_SCHOOL_COPY_ID.NEXTVAL,
        #{resumeId},
        #{sortation},
        #{schoolName},
        <choose>
            <when test="yearOfGraduation != null and yearOfGraduation != ''">
                #{yearOfGraduation}
            </when>
            <otherwise>
                NULL
            </otherwise>
        </choose>,
        #{status},
        #{majorName, jdbcType=VARCHAR},
        <choose>
            <when test="startDate != null">
                #{startDate, jdbcType=DATE}
            </when>
            <otherwise>
                NULL
            </otherwise>
        </choose>,
        <choose>
            <when test="endDate != null">
                #{endDate, jdbcType=DATE}
            </when>
            <otherwise>
                NULL
            </otherwise>
        </choose>
    )
</insert>

    
    <!-- 교육정보 저장 -->
    <insert id="insertEducation" parameterType="com.joblessfriend.jobfinder.resume.domain.EducationVo">
        INSERT INTO EDUCATION_COPY (
            EDU_ID, RESUME_ID, EDU_INSTITUTION, EDU_NAME, START_DATE, END_DATE
        )
        VALUES (
                   SEQ_EDUCATION_COPY_ID.NEXTVAL, #{resumeId}, #{eduInstitution}, #{eduName},
            #{startDate, jdbcType=DATE}, #{endDate, jdbcType=DATE}
        )
    </insert>
    
    <!-- 경력정보 저장 -->
    <insert id="insertCareer" parameterType="com.joblessfriend.jobfinder.resume.domain.CareerVo">
        INSERT INTO CAREER_COPY (
            CAREER_ID, RESUME_ID, COMPANY_NAME, DEPARTMENT_NAME, HIRE_YM, RESIGN_YM,
            POSITION, DETAIL, SALARY
        )
        VALUES (
                   SEQ_CAREER_COPY_ID.NEXTVAL, #{resumeId}, #{companyName}, #{departmentName},
                   #{hireYm, jdbcType=DATE}, #{resignYm, jdbcType=DATE},
                   #{position, jdbcType=VARCHAR},
                   #{workDescription, jdbcType=VARCHAR},
                   #{salary, jdbcType=VARCHAR}
               )
    </insert>

    <insert id="insertResumeTagCopy" parameterType="map">
        INSERT INTO RESUME_TAG_COPY (
            RESUME_TAG_ID, RESUME_ID, TAG_ID, CREATE_AT, MODIFIED_AT
        )
        VALUES (
                   SEQ_RESUME_TAG_COPY_ID.NEXTVAL,
                   #{resumeId},
                   #{tagId},
                   SYSDATE,
                   SYSDATE
               )
    </insert>

    <!-- 스킬정보 저장 -->
    <insert id="insertResumeTag">
        INSERT INTO RESUME_TAG_COPY (
            RESUME_TAG_ID, RESUME_ID, TAG_ID, CREATE_AT, MODIFIED_AT
        )
        VALUES (
                   SEQ_RESUME_TAG_COPY_ID.NEXTVAL, #{resumeId}, #{tagId}, SYSDATE, SYSDATE
        )
    </insert>
    
    <!-- 자격증정보 저장 -->
    <insert id="insertCertificateResume">
        INSERT INTO CERTIFICATE_RESUME_COPY (
            CERTIFICATE_RESUME_ID, RESUME_ID, CERTIFICATE_ID, CREATE_AT, MODIFIED_AT
        )
        VALUES (
                   SEQ_CERTIFICATE_RESUME_COPY_ID.NEXTVAL, #{resumeId}, #{certificateId}, SYSDATE, SYSDATE
        )
    </insert>    
    
    <!-- 포트폴리오정보 저장 -->
    <insert id="insertPortfolio" parameterType="com.joblessfriend.jobfinder.resume.domain.PortfolioVo">
        INSERT INTO PORTFOLIO_COPY (
            PORTFOLIO_ID, RESUME_ID, FILE_NAME, STORED_FILE_NAME, FILE_EXTENSION, CREATE_AT, MODIFIED_AT
        )
        VALUES (
                   SEQ_PORTFOLIO_COPY_ID.NEXTVAL, #{resumeId}, #{fileName}, #{storedFileName},
            #{fileExtension}, SYSDATE, SYSDATE
        )
    </insert>
    
    <!-- 이력서 업데이트 -->
    <update id="updateResume" parameterType="com.joblessfriend.jobfinder.resume.domain.ResumeVo">
        UPDATE RESUME SET 
            NAME = #{memberName, jdbcType=VARCHAR},
            BIRTHDATE = #{birthDate, jdbcType=DATE},
            PHONENUMBER = #{phoneNumber, jdbcType=VARCHAR},
            EMAIL = #{email, jdbcType=VARCHAR},
            POSTAL_CODE_ID = #{postalCodeId, jdbcType=INTEGER},
            ADDRESS = #{address, jdbcType=VARCHAR},
            SELF_INTRODUCTION = #{selfIntroduction, jdbcType=VARCHAR},
            PROFILE = #{profile, jdbcType=VARCHAR},
            JOB_GROUP_ID = #{jobGroupId, jdbcType=INTEGER},
            JOB_ID = #{jobId, jdbcType=INTEGER},
            MODIFIED_AT = SYSDATE
        WHERE RESUME_ID = #{resumeId}
          AND MEMBER_ID = #{memberId}
    </update>
    
    <!-- 하위 데이터 조회 쿼리들 -->
    <select id="getSchoolsByResumeId" resultType="com.joblessfriend.jobfinder.resume.domain.SchoolVo">
        SELECT SCHOOL_ID as schoolId, RESUME_ID as resumeId, SORTATION as sortation, 
               SCHOOL_NAME as schoolName, YEAR_OF_GRADUATION as yearOfGraduation, 
               STATUS as status, MAJOR_NAME as majorName, START_DATE as startDate, END_DATE as endDate
        FROM SCHOOL 
        WHERE RESUME_ID = #{resumeId}
        ORDER BY SCHOOL_ID
    </select>
    
    <select id="getCareersByResumeId" resultType="com.joblessfriend.jobfinder.resume.domain.CareerVo">
        SELECT CAREER_ID as careerId, RESUME_ID as resumeId, COMPANY_NAME as companyName, 
               DEPARTMENT_NAME as departmentName, HIRE_YM as hireYm, RESIGN_YM as resignYm,
               POSITION as position, JOB_TITLE as jobTitle, TASK_ROLE as taskRole, 
               DETAIL as workDescription, SALARY as salary
        FROM CAREER 
        WHERE RESUME_ID = #{resumeId}
        ORDER BY CAREER_ID
    </select>
    
    <select id="getEducationsByResumeId" resultType="com.joblessfriend.jobfinder.resume.domain.EducationVo">
        SELECT EDU_ID as eduId, RESUME_ID as resumeId, EDU_INSTITUTION as eduInstitution, 
               EDU_NAME as eduName, START_DATE as startDate, END_DATE as endDate
        FROM EDUCATION 
        WHERE RESUME_ID = #{resumeId}
        ORDER BY EDU_ID
    </select>
    
    <select id="getPortfoliosByResumeId" resultType="com.joblessfriend.jobfinder.resume.domain.PortfolioVo">
        SELECT PORTFOLIO_ID as portfolioId, RESUME_ID as resumeId, FILE_NAME as fileName, 
               STORED_FILE_NAME as storedFileName, FILE_EXTENSION as fileExtension,
               CREATE_AT as createAt, MODIFIED_AT as modifiedAt
        FROM PORTFOLIO 
        WHERE RESUME_ID = #{resumeId}
        ORDER BY PORTFOLIO_ID
    </select>
    
    <select id="getCertificateIdsByResumeId" resultType="Integer">
        SELECT CERTIFICATE_ID
        FROM CERTIFICATE_RESUME 
        WHERE RESUME_ID = #{resumeId}
        ORDER BY CERTIFICATE_RESUME_ID
    </select>

    <select id="getTagIdsByResumeId" resultType="Integer">
        SELECT TAG_ID
        FROM RESUME_TAG
        WHERE RESUME_ID = #{resumeId}
    </select>

<!-- 지원하기 로직들 -->

    <insert id="insertResumeManage" parameterType="com.joblessfriend.jobfinder.resume.domain.ResumeManageVo">
        INSERT INTO RESUME_MANAGE (
            RM_ID,
            JOB_POST_ID,
            MEMBER_ID,
            RESUME_FILE,
            STATE_ID
        ) VALUES (
                    RM_ID_SEQ.NEXTVAL,
                     #{jobPostId},
                     #{memberId},
                     #{resumeFile},
                     #{stateId}
                 )
    </insert>



    <!-- 하위 데이터 삭제 쿼리들 -->
    <delete id="deleteSchoolsByResumeId">
        DELETE FROM SCHOOL WHERE RESUME_ID = #{resumeId}
    </delete>
    
    <delete id="deleteCareersByResumeId">
        DELETE FROM CAREER WHERE RESUME_ID = #{resumeId}
    </delete>
    
    <delete id="deleteEducationsByResumeId">
        DELETE FROM EDUCATION WHERE RESUME_ID = #{resumeId}
    </delete>
    
    <delete id="deleteCertificatesByResumeId">
        DELETE FROM CERTIFICATE_RESUME WHERE RESUME_ID = #{resumeId}
    </delete>
    
    <delete id="deleteTagsByResumeId">
        DELETE FROM RESUME_TAG WHERE RESUME_ID = #{resumeId}
    </delete>
    
    <delete id="deletePortfoliosByResumeId">
        DELETE FROM PORTFOLIO WHERE RESUME_ID = #{resumeId}
    </delete>
    
</mapper>