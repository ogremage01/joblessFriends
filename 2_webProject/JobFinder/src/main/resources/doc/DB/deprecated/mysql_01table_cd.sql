-- MySQL 테이블 정의 파일
SET FOREIGN_KEY_CHECKS = 0;

-- chat_room
DROP TABLE IF EXISTS CHAT_ROOM;
CREATE TABLE CHAT_ROOM (
    ROOM_ID VARCHAR(255) NOT NULL PRIMARY KEY,
    EMAIL VARCHAR(255),
    LAST_MESSAGE_TIME TIMESTAMP(6),
    NAME VARCHAR(255)
);

-- chat_message
DROP TABLE IF EXISTS chat_message;
CREATE TABLE chat_message (
    id INT AUTO_INCREMENT PRIMARY KEY,
    room_id VARCHAR(255) NOT NULL,
    sender VARCHAR(255) NOT NULL,
    message TEXT NOT NULL,
    send_time DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- job_group
DROP TABLE IF EXISTS JOB_GROUP;
CREATE TABLE JOB_GROUP (
    JOB_GROUP_ID INT AUTO_INCREMENT PRIMARY KEY,
    JOB_GROUP_NAME VARCHAR(300)
);

-- job
DROP TABLE IF EXISTS JOB;
CREATE TABLE JOB (
    JOB_ID INT AUTO_INCREMENT PRIMARY KEY,
    JOB_GROUP_ID INT,
    JOB_NAME VARCHAR(3000),
    CONSTRAINT FK_JOB_GROUP_TO_JOB FOREIGN KEY (JOB_GROUP_ID) REFERENCES JOB_GROUP (JOB_GROUP_ID) ON DELETE CASCADE
);

-- Certificate (자격증) api 쓸 예정
DROP TABLE IF EXISTS CERTIFICATE;
CREATE TABLE CERTIFICATE (
    CERTIFICATE_ID INT AUTO_INCREMENT PRIMARY KEY,
    CERTIFICATE_NAME VARCHAR(3000),
    ISSUING_AUTHORITY VARCHAR(3000),
    IS_ACTIVE TINYINT(1) NULL
);

-- Tag
DROP TABLE IF EXISTS TAG;
CREATE TABLE TAG (
    TAG_ID INT AUTO_INCREMENT PRIMARY KEY,
    TAG_NAME VARCHAR(3000),
    CREATE_AT DATETIME DEFAULT CURRENT_TIMESTAMP,
    MODIFIED_AT DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    JOB_GROUP_ID INT,
    CONSTRAINT FK_JOB_GROUP_TO_TAG FOREIGN KEY (JOB_GROUP_ID) REFERENCES JOB_GROUP (JOB_GROUP_ID) ON DELETE CASCADE
);

-- 복지
DROP TABLE IF EXISTS JOB_POST_WELFARE;
CREATE TABLE JOB_POST_WELFARE (
    JOB_WELFARE_ID INT AUTO_INCREMENT PRIMARY KEY,
    JOB_POST_ID INT NOT NULL,
    BENEFIT_TEXT VARCHAR(500) NOT NULL,
    CONSTRAINT FK_JOB_POST_WELFARE_JOB_POST
    FOREIGN KEY (JOB_POST_ID) REFERENCES JOB_POST(JOB_POST_ID) ON DELETE CASCADE
);

-- state
DROP TABLE IF EXISTS STATE;
CREATE TABLE STATE (
    STATE_ID INT AUTO_INCREMENT PRIMARY KEY,
    STATE_NAME VARCHAR(3000)
);

-- MEMBER
DROP TABLE IF EXISTS MEMBER;
CREATE TABLE MEMBER (
    MEMBER_ID INT AUTO_INCREMENT PRIMARY KEY,
    EMAIL VARCHAR(3000) UNIQUE,
    PASSWORD VARCHAR(3000),
    NICKNAME VARCHAR(3000),
    RESUME_MAX INT DEFAULT 5,
    CREATE_AT DATETIME DEFAULT CURRENT_TIMESTAMP,
    MODIFIED_AT DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    PROVIDER VARCHAR(3000) DEFAULT 'normal'
);

-- Admin
DROP TABLE IF EXISTS ADMIN;
CREATE TABLE ADMIN (
    ADMIN_ID VARCHAR(3000) PRIMARY KEY,
    PASSWORD VARCHAR(3000)
);

-- COMPANY
DROP TABLE IF EXISTS COMPANY;
CREATE TABLE COMPANY (
    COMPANY_ID INT AUTO_INCREMENT PRIMARY KEY,
    EMAIL VARCHAR(3000),
    PASSWORD VARCHAR(3000),
    COMPANY_NAME VARCHAR(3000),
    BRN VARCHAR(3000),
    REPRESENTATIVE VARCHAR(3000),
    TEL VARCHAR(3000),
    POSTAL_CODE_ID INT,
    ADDRESS VARCHAR(3000),
    ARENA_NAME VARCHAR(3000),
    CREATE_AT DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- PROFILE_TEMP
DROP TABLE IF EXISTS PROFILE_TEMP;
CREATE TABLE PROFILE_TEMP (
    UPLOAD_ID INT AUTO_INCREMENT PRIMARY KEY,
    MEMBER_ID INT,
    FILE_NAME VARCHAR(3000),
    IS_USED TINYINT(1) DEFAULT 0,
    CREATE_AT DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Resume
DROP TABLE IF EXISTS RESUME;
CREATE TABLE RESUME (
    RESUME_ID INT AUTO_INCREMENT PRIMARY KEY,
    RESUME_TITLE VARCHAR(3000),
    NAME VARCHAR(3000),
    BIRTHDATE DATE,
    PHONENUMBER VARCHAR(3000),
    EMAIL VARCHAR(3000),
    POSTAL_CODE_ID INT,
    ADDRESS VARCHAR(3000),
    SELF_INTRODUCTION VARCHAR(3000),
    MEMBER_ID INT,
    PROFILE VARCHAR(3000),
    CREATE_AT DATETIME DEFAULT CURRENT_TIMESTAMP,
    MODIFIED_AT DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    IS_PUBLIC TINYINT(1),
    CONSTRAINT FK_MEMBER_TO_RESUME FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER(MEMBER_ID) ON DELETE CASCADE
);

-- Certificate_RESUME (이력서 자격증)
DROP TABLE IF EXISTS CERTIFICATE_RESUME;
CREATE TABLE CERTIFICATE_RESUME (
    CERTIFICATE_RESUME_ID INT AUTO_INCREMENT PRIMARY KEY,
    RESUME_ID INT,
    CERTIFICATE_NAME VARCHAR(3000),
    ACQUISITION_DATE DATE,
    ISSUING_AUTHORITY VARCHAR(3000),
    CONSTRAINT FK_RESUME_TO_CERTIFICATE FOREIGN KEY (RESUME_ID) REFERENCES RESUME(RESUME_ID) ON DELETE CASCADE
);

-- Career
DROP TABLE IF EXISTS CAREER;
CREATE TABLE CAREER (
    CAREER_ID INT AUTO_INCREMENT PRIMARY KEY,
    RESUME_ID INT,
    COMPANY_NAME VARCHAR(3000),
    DEPARTMENT_NAME VARCHAR(3000),
    HIRE_YM DATE,
    RESIGN_YM DATE,
    POSITION VARCHAR(3000),
    JOB_ID INT,
    JOB_GROUP_ID INT,
    SALARY INT,
    DETAIL VARCHAR(3000),
    CONSTRAINT FK_RESUME_TO_CAREER FOREIGN KEY (RESUME_ID) REFERENCES RESUME(RESUME_ID) ON DELETE CASCADE,
    CONSTRAINT FK_JOB_TO_CAREER FOREIGN KEY (JOB_ID) REFERENCES JOB(JOB_ID),
    CONSTRAINT FK_JOB_GROUP_TO_CAREER FOREIGN KEY (JOB_GROUP_ID) REFERENCES JOB_GROUP(JOB_GROUP_ID)
);

-- Education
DROP TABLE IF EXISTS EDUCATION;
CREATE TABLE EDUCATION (
    EDU_ID INT AUTO_INCREMENT PRIMARY KEY,
    Resume_ID INT,
    EDU_INSTITUTION VARCHAR(3000),
    EDU_NAME VARCHAR(3000),
    START_DATE DATE,
    END_DATE DATE,
    CONTENT VARCHAR(3000),
    CONSTRAINT FK_RESUME_TO_EDUCATION FOREIGN KEY (Resume_ID) REFERENCES RESUME(RESUME_ID) ON DELETE CASCADE
);

-- School
DROP TABLE IF EXISTS SCHOOL;
CREATE TABLE SCHOOL (
    SCHOOL_ID INT AUTO_INCREMENT PRIMARY KEY,
    Resume_ID INT,
    SORTATION VARCHAR(3000),
    SCHOOL_NAME VARCHAR(3000),
    YEAR_OF_GRADUATION VARCHAR(3000),
    START_DATE DATE,
    END_DATE DATE,
    MAJOR_NAME VARCHAR(3000),
    STATUS VARCHAR(3000),
    CONSTRAINT FK_RESUME_TO_SCHOOL FOREIGN KEY (Resume_ID) REFERENCES RESUME(RESUME_ID) ON DELETE CASCADE
);

-- Portfolio
DROP TABLE IF EXISTS PORTFOLIO;
CREATE TABLE PORTFOLIO (
    PORTFOLIO_ID INT AUTO_INCREMENT PRIMARY KEY,
    Resume_ID INT,
    FILE_NAME VARCHAR(3000),
    STORED_FILE_NAME VARCHAR(3000),
    FILE_EXTENSION VARCHAR(300),
    CREATE_AT DATETIME DEFAULT CURRENT_TIMESTAMP,
    MODIFIED_AT DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    CONSTRAINT FK_RESUME_TO_PORTFOLIO FOREIGN KEY (Resume_ID) REFERENCES RESUME(RESUME_ID) ON DELETE CASCADE
);

-- Job_Post
DROP TABLE IF EXISTS JOB_POST;
CREATE TABLE JOB_POST (
    Job_Post_ID INT AUTO_INCREMENT PRIMARY KEY,
    COMPANY_ID INT NOT NULL,
    Title VARCHAR(3000) NOT NULL,
    Content TEXT NOT NULL,
    Salary VARCHAR(4000),
    Work_Hours VARCHAR(200),
    Location VARCHAR(3000),
    Experience VARCHAR(200),
    Education VARCHAR(200),
    Employment_Type VARCHAR(200),
    Deadline DATE,
    Views INT DEFAULT 0,
    CREATE_AT DATETIME DEFAULT CURRENT_TIMESTAMP,
    MODIFIED_AT DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    IS_ACTIVE TINYINT(1) DEFAULT 1,
    CONSTRAINT FK_COMPANY_TO_JOB_POST FOREIGN KEY (COMPANY_ID) REFERENCES COMPANY(COMPANY_ID) ON DELETE CASCADE
);

-- JOB_POST_FILE
DROP TABLE IF EXISTS JOB_POST_FILE;
CREATE TABLE JOB_POST_FILE (
    JOB_POST_FILE_ID INT AUTO_INCREMENT PRIMARY KEY,
    JOB_POST_ID INT NOT NULL,
    FILE_NAME VARCHAR(3000),
    STORED_FILE_NAME VARCHAR(3000),
    FILE_EXTENSION VARCHAR(300),
    CREATE_AT DATETIME DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_JOB_POST_TO_FILE FOREIGN KEY (JOB_POST_ID) REFERENCES JOB_POST(JOB_POST_ID) ON DELETE CASCADE
);

-- JOB_POST_TAG
DROP TABLE IF EXISTS JOB_POST_TAG;
CREATE TABLE JOB_POST_TAG (
    JOB_POST_TAG_ID INT AUTO_INCREMENT PRIMARY KEY,
    JOB_POST_ID INT,
    TAG_ID INT,
    CONSTRAINT FK_JOB_POST_TO_TAG FOREIGN KEY (JOB_POST_ID) REFERENCES JOB_POST(JOB_POST_ID) ON DELETE CASCADE,
    CONSTRAINT FK_TAG_TO_JOB_POST FOREIGN KEY (TAG_ID) REFERENCES TAG(TAG_ID) ON DELETE CASCADE
);

-- JOB_POST_QUESTION
DROP TABLE IF EXISTS JOB_POST_QUESTION;
CREATE TABLE JOB_POST_QUESTION (
    JOB_POST_QUESTION_ID INT AUTO_INCREMENT PRIMARY KEY,
    JOB_POST_ID INT NOT NULL,
    QUESTION_TEXT VARCHAR(4000) NOT NULL,
    CONSTRAINT FK_JOB_POST_QUESTION_POST FOREIGN KEY (JOB_POST_ID) REFERENCES JOB_POST(JOB_POST_ID) ON DELETE CASCADE
);

-- JOB_POST_ANSWER
DROP TABLE IF EXISTS JOB_POST_ANSWER;
CREATE TABLE JOB_POST_ANSWER (
    JOB_POST_ANSWER_ID INT AUTO_INCREMENT PRIMARY KEY,
    JOB_POST_QUESTION_ID INT NOT NULL,
    MEMBER_ID INT NOT NULL,
    ANSWER_TEXT VARCHAR(4000) NOT NULL,
    CREATE_AT DATETIME DEFAULT CURRENT_TIMESTAMP,
    MODIFIED_AT DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    CONSTRAINT FK_JOB_POST_ANSWER_QUESTION 
        FOREIGN KEY (JOB_POST_QUESTION_ID) REFERENCES JOB_POST_QUESTION(JOB_POST_QUESTION_ID) ON DELETE CASCADE,
    CONSTRAINT FK_JOB_POST_ANSWER_MEMBER 
        FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER(MEMBER_ID) ON DELETE CASCADE
);

-- RESUME_MANAGE
DROP TABLE IF EXISTS RESUME_MANAGE;
CREATE TABLE RESUME_MANAGE (
    RM_ID INT AUTO_INCREMENT PRIMARY KEY,
    JOB_POST_ID INT,
    RESUME_ID INT,
    MEMBER_ID INT,
    APPLICATION_DATE DATETIME DEFAULT CURRENT_TIMESTAMP,
    STATUS VARCHAR(50) DEFAULT 'APPLIED',
    NOTES VARCHAR(4000),
    CONSTRAINT FK_RESUME_MANAGE_JOB_POST FOREIGN KEY (JOB_POST_ID) REFERENCES JOB_POST(JOB_POST_ID) ON DELETE CASCADE,
    CONSTRAINT FK_RESUME_MANAGE_RESUME FOREIGN KEY (RESUME_ID) REFERENCES RESUME(RESUME_ID) ON DELETE CASCADE,
    CONSTRAINT FK_RESUME_MANAGE_MEMBER FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER(MEMBER_ID) ON DELETE CASCADE
);

-- RESUME_TAG
DROP TABLE IF EXISTS RESUME_TAG;
CREATE TABLE RESUME_TAG (
    RESUME_TAG_ID INT AUTO_INCREMENT PRIMARY KEY,
    RESUME_ID INT,
    TAG_ID INT,
    CREATE_AT DATETIME DEFAULT CURRENT_TIMESTAMP,
    MODIFIED_AT DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    CONSTRAINT FK_RESUME_TAG_RESUME FOREIGN KEY (RESUME_ID) REFERENCES RESUME(RESUME_ID) ON DELETE CASCADE,
    CONSTRAINT FK_RESUME_TAG_TAG FOREIGN KEY (TAG_ID) REFERENCES TAG(TAG_ID) ON DELETE CASCADE
);

-- BOOKMARK
DROP TABLE IF EXISTS BOOKMARK;
CREATE TABLE BOOKMARK (
    BOOKMARK_ID INT AUTO_INCREMENT PRIMARY KEY,
    MEMBER_ID INT,
    JOB_POST_ID INT,
    CREATE_AT DATETIME DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_BOOKMARK_MEMBER FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER(MEMBER_ID) ON DELETE CASCADE,
    CONSTRAINT FK_BOOKMARK_JOB_POST FOREIGN KEY (JOB_POST_ID) REFERENCES JOB_POST(JOB_POST_ID) ON DELETE CASCADE
);

-- COMMUNITY
DROP TABLE IF EXISTS COMMUNITY;
CREATE TABLE COMMUNITY (
    COMMUNITY_ID INT AUTO_INCREMENT PRIMARY KEY,
    MEMBER_ID INT,
    TITLE VARCHAR(3000),
    CONTENT TEXT,
    VIEWS INT DEFAULT 0,
    CREATE_AT DATETIME DEFAULT CURRENT_TIMESTAMP,
    MODIFIED_AT DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    CONSTRAINT FK_COMMUNITY_MEMBER FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER(MEMBER_ID) ON DELETE CASCADE
);

-- COMMUNITY_FILE
DROP TABLE IF EXISTS COMMUNITY_FILE;
CREATE TABLE COMMUNITY_FILE (
    COMMUNITY_FILE_ID INT AUTO_INCREMENT PRIMARY KEY,
    COMMUNITY_ID INT,
    FILE_NAME VARCHAR(3000),
    STORED_FILE_NAME VARCHAR(3000),
    FILE_EXTENSION VARCHAR(300),
    FILE_SIZE BIGINT,
    CREATE_AT DATETIME DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_COMMUNITY_FILE_COMMUNITY FOREIGN KEY (COMMUNITY_ID) REFERENCES COMMUNITY(COMMUNITY_ID) ON DELETE CASCADE
);

-- POST_COMMENT
DROP TABLE IF EXISTS POST_COMMENT;
CREATE TABLE POST_COMMENT (
    POST_COMMENT_ID INT AUTO_INCREMENT PRIMARY KEY,
    COMMUNITY_ID INT,
    MEMBER_ID INT,
    CONTENT VARCHAR(4000),
    CREATE_AT DATETIME DEFAULT CURRENT_TIMESTAMP,
    MODIFIED_AT DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    CONSTRAINT FK_POST_COMMENT_COMMUNITY FOREIGN KEY (COMMUNITY_ID) REFERENCES COMMUNITY(COMMUNITY_ID) ON DELETE CASCADE,
    CONSTRAINT FK_POST_COMMENT_MEMBER FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER(MEMBER_ID) ON DELETE CASCADE
);

-- REPLY
DROP TABLE IF EXISTS REPLY;
CREATE TABLE REPLY (
    REPLY_ID INT AUTO_INCREMENT PRIMARY KEY,
    POST_COMMENT_ID INT,
    MEMBER_ID INT,
    CONTENT VARCHAR(4000),
    CREATE_AT DATETIME DEFAULT CURRENT_TIMESTAMP,
    MODIFIED_AT DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    CONSTRAINT FK_REPLY_COMMENT FOREIGN KEY (POST_COMMENT_ID) REFERENCES POST_COMMENT(POST_COMMENT_ID) ON DELETE CASCADE,
    CONSTRAINT FK_REPLY_MEMBER FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER(MEMBER_ID) ON DELETE CASCADE
);

-- CHATROOM
DROP TABLE IF EXISTS CHATROOM;
CREATE TABLE CHATROOM (
    CR_ID INT AUTO_INCREMENT PRIMARY KEY,
    ROOM_NAME VARCHAR(3000),
    CREATE_AT DATETIME DEFAULT CURRENT_TIMESTAMP,
    MODIFIED_AT DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- CHATMESSAGE
DROP TABLE IF EXISTS CHATMESSAGE;
CREATE TABLE CHATMESSAGE (
    CM_ID INT AUTO_INCREMENT PRIMARY KEY,
    CR_ID INT,
    MEMBER_ID INT,
    MESSAGE VARCHAR(4000),
    SEND_TIME DATETIME DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_CHATMESSAGE_ROOM FOREIGN KEY (CR_ID) REFERENCES CHATROOM(CR_ID) ON DELETE CASCADE,
    CONSTRAINT FK_CHATMESSAGE_MEMBER FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER(MEMBER_ID) ON DELETE CASCADE
);

-- CAREER_GRADE
DROP TABLE IF EXISTS CAREER_GRADE;
CREATE TABLE CAREER_GRADE (
    GRADE_ID INT AUTO_INCREMENT PRIMARY KEY,
    GRADE_NAME VARCHAR(100),
    MIN_EXPERIENCE INT,
    MAX_EXPERIENCE INT,
    DESCRIPTION VARCHAR(500)
);

-- NOTICE
DROP TABLE IF EXISTS NOTICE;
CREATE TABLE NOTICE (
    NOTICE_ID INT AUTO_INCREMENT PRIMARY KEY,
    NOTICE_CATEGORY_ID INT,
    TITLE VARCHAR(3000),
    CONTENT TEXT,
    CREATE_AT DATETIME DEFAULT CURRENT_TIMESTAMP,
    MODIFIED_AT DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    IS_ACTIVE TINYINT(1) DEFAULT 1,
    CONSTRAINT FK_NOTICE_CATEGORY FOREIGN KEY (NOTICE_CATEGORY_ID) REFERENCES NOTICE_CATEGORY(NOTICE_CATEGORY_ID)
);

-- NOTICE_CATEGORY
DROP TABLE IF EXISTS NOTICE_CATEGORY;
CREATE TABLE NOTICE_CATEGORY (
    NOTICE_CATEGORY_ID INT AUTO_INCREMENT PRIMARY KEY,
    CATEGORY_NAME VARCHAR(100),
    DESCRIPTION VARCHAR(500),
    CREATE_AT DATETIME DEFAULT CURRENT_TIMESTAMP
);

SET FOREIGN_KEY_CHECKS = 1; 