깃관리 원칙

필독★

★개발시작전 무조건적인 패치(최신화), 변경사항 확인 필수 ( 변경사항 미숙지 충돌 각자해결 ) ★

★커밋 메시지 통일★ 

[담당] 진행:  / 완료: 완료된 기능들
(예시) [회원] feat-jhs: 비밀번호찾기 기능 구현 / 완료: 회원탈퇴       -->  병합대상 
(예시) [회원] jhs: 비밀번호찾기 기능 구현 / 완료: 회원탈퇴       -->  병합 미대상 

병합예정으로 완료된 기능만  "feat"달것 

병합 대상 브랜치는 "병합될 때까지 커밋 금지"
feat 달면 병합예정으로 병합할떄까지는 커밋 및 푸쉬금지, 
ex:    이제 발표할 PPT 최종본 정했는데, 누가 갑자기 슬라이드 하나 더 추가하면?" 으로 이해   
  다음 기능완료까지 병합할 예정없음 , 

★병합 메시지 통일★
[병합] feat-jhs → feat 통합




★커밋이 다른기능 영향을 줄경우★ 
예시) [회원] feat-jhs: [global] 로그인 상태 연동을 전역 context로 변경  ---> 병합대상 

전역(Global) 변경을 포함하는 커밋은, feat 브랜치의 최신 상태를 먼저 병합한 후에 작업해야 한다. 
이를 지키지 않으면 병합 과정에서 예상치 못한 충돌 및 기능 오류가 발생할 수 있음.

★커밋 전략 ★

1. 각자의 브랜치에서 작업을한다. 

2. 커밋을 하는 단위는 커밋 메시지 한 줄로 설명할 수 있는 행동이어야 한다.
	ex: feat:  로그인 폼 ui 구현  o 
		feat: 로그인화면단완료   x
어떤 작업을 했는지 **구체적 기능 명시**로 표현

3. 작은 단위의 기능이 동작 가능한 수준으로 구현되었을 때, 커밋하기.
	ex: : 버튼 클릭 시 동작 구현, 하나의 컴포넌트 완성 등

4.개발이 완료된 커밋 이후, 깃 관리자가 병합을 완료할 때까지는 개인 브랜치(jhs 등)에 추가 커밋을 올리지 말 것  

5. 주기적으로 병합 (기능 일부라도 병합) 예정  

6. 개인브랜치(커밋)  -->  feat (통합개발 병합) --> (충돌해결) --> main병합  

7. feat 병합완료 --> 개인 --> feat병합 (통합된 기능  pull 처리)  
	(이렇게 하면 feat 브랜치의 최신 코드가 현재 작업 중인 브랜치에 반영됨)



★병합 전략 ★ 

1. 개인 브랜치 관리 (개발자)
각자 닉네임 브랜치에서 개발 진행

기능 완료 후 커밋 시 "feat-" 접두어를 사용하여 병합 대상으로 지정

병합 대상 커밋은 "feat 브랜치"로 통합 예정



2. feat 브랜치 관리 (중간 통합)
깃 관리자가 수시로 개인 브랜치 → feat 브랜치로 병합

병합 시 커밋 메시지는 [병합] feat-jhs → feat 통합 형식 사용

충돌 발생 시:

1차: 깃 관리자가 직접 충돌 해결

2차: 해결 불가능한 경우 개발자 호출하여 수동 해결

feat 브랜치는 항상 동작 가능한 상태(빌드 가능 상태) 유지 목표



3. main 브랜치 관리 (최종 통합)
feat 브랜치 테스트 완료 후, 깃 관리자가 main 브랜치로 병합

main 병합 주기:

1일 1회 또는 큰 기능 완성 시

긴급 패치가 필요한 경우 수시 반영

